description = 'CAMEA basic devices: motors, counters and such'

pvmcu1 = 'SQ:CAMEA:mcu1:'
pvmcu2 = 'SQ:CAMEA:mcu2:'
pvmcu3 = 'SQ:CAMEA:mcu3:'
pvmcu4 = 'SQ:CAMEA:mcu4:'

devices = dict(
    s2t = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample two theta',
        motorpv = pvmcu1 + '2t',
        errormsgpv = pvmcu1 + '2t-MsgTxt',
        precision = 0.02,
    ),
    m2t = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Monochromator two theta',
        motorpv = pvmcu1 + '2tm',
        errormsgpv = pvmcu1 + '2tm-MsgTxt',
        precision = 0.02,
    ),
    gl = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample table lower goniometer',
        motorpv = pvmcu1 + 'gl',
        errormsgpv = pvmcu1 + 'gl-MsgTxt',
        precision = 0.02,
    ),
    gu = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample table upper goniometer',
        motorpv = pvmcu1 + 'gu',
        errormsgpv = pvmcu1 + 'gu-MsgTxt',
        precision = 0.02,
    ),
    som = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample rotation',
        motorpv = pvmcu1 + 'som',
        errormsgpv = pvmcu1 + 'som-MsgTxt',
        precision = 0.02,
    ),
    tl = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample table lower translation',
        motorpv = pvmcu1 + 'tl',
        errormsgpv = pvmcu1 + 'tl-MsgTxt',
        precision = 0.02,
    ),
    tu = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample table upper translation',
        motorpv = pvmcu1 + 'tu',
        errormsgpv = pvmcu1 + 'tu-MsgTxt',
        precision = 0.02,
    ),
    gm = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Monochromator goniometer',
        motorpv = pvmcu3 + 'gm',
        errormsgpv = pvmcu3 + 'gm-MsgTxt',
        precision = 0.02,
    ),
    mcv = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Monochromator curvature',
        motorpv = pvmcu3 + 'mcv',
        errormsgpv = pvmcu3 + 'mcv-MsgTxt',
        precision = 0.02,
    ),
    omm = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Monochromator rotation',
        motorpv = pvmcu3 + 'omm',
        errormsgpv = pvmcu3 + 'omm-MsgTxt',
        precision = 0.02,
    ),
    tlm = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Monochromator lower translation',
        motorpv = pvmcu3 + 'tlm',
        errormsgpv = pvmcu3 + 'tlm-MsgTxt',
        precision = 0.02,
    ),
    tum = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Monochromator upper translation',
        motorpv = pvmcu3 + 'tum',
        errormsgpv = pvmcu3 + 'tum-MsgTxt',
        precision = 0.02,
    ),
    mono = device('nicos_sinq.devices.mono.SinqMonochromator',
        description = 'Camea monochromator',
        theta = 'omm',
        twotheta = 'm2t',
        dvalue = 3.354,
        scatteringsense = 1,
        crystalside = 1,
        unit = 'meV',
        focmode = 'vertical',
        vfocuspars = [-0.2351, 1.157],
        abslimits = [2.75, 20],
        focusv = 'mcv'
    ),
    a5 = device('nicos.devices.generic.virtual.VirtualMotor',
        description = 'Virtual a5 motor for analyser',
        speed = 10000,
        unit = 'deg',
        precision = .02,
        abslimits = (-180., 180.)
    ),
    a6 = device('nicos.devices.generic.virtual.VirtualMotor',
        description = 'Virtual a6 motor for analyser',
        speed = 10000,
        unit = 'deg',
        precision = .02,
        abslimits = (-360., 360.)
    ),
    ana = device('nicos_sinq.devices.mono.SinqMonochromator',
        description = 'Camea analyser',
        theta = 'a5',
        twotheta = 'a6',
        dvalue = 3.354,
        scatteringsense = 1,
        crystalside = 1,
        unit = 'meV',
        focmode = 'flat',
        abslimits = (2.75, 20),
    ),
    ei = device('nicos.core.device.DeviceAlias',
        description = 'Alias for driving the monochromator',
        alias = 'mono',
    ),
    ef = device('nicos.core.device.DeviceAlias',
        description = 'Alias for driving the analyser',
        alias = 'ana',
    ),
    a1 = device('nicos.core.device.DeviceAlias',
        description = 'Alias monochromator theta',
        alias = 'omm',
    ),
    a2 = device('nicos.core.device.DeviceAlias',
        description = 'Alias monochromator two theta',
        alias = 'm2t',
    ),
    a3 = device('nicos.core.device.DeviceAlias',
        description = 'Alias sample rotation',
        alias = 'som',
    ),
    a4 = device('nicos_sinq.camea.devices.a4motor.CameaA4Motor',
        description = 'Real A4 with special offset',
        rawa4 = 's2t',
        unit = 'deg',
    ),
    sgl = device('nicos_sinq.camea.devices.a4motor.CameaA4Motor',
        description = 'Alias lower tilt',
        rawa4 = 'gl',
        unit = 'deg',
    ),
    sgu = device('nicos_sinq.camea.devices.a4motor.CameaA4Motor',
        description = 'Alias upper tilt',
        rawa4 = 'gu',
        unit = 'deg',
    ),
    calib1 = device('nicos_sinq.camea.devices.calibration.CalibrationData',
        description = 'Data class for calibration data'
    ),
    calib3 = device('nicos_sinq.camea.devices.calibration.CalibrationData',
        description = 'Data class for calibration data'
    ),
    calib5 = device('nicos_sinq.camea.devices.calibration.CalibrationData',
        description = 'Data class for calibration data'
    ),
    calib8 = device('nicos_sinq.camea.devices.calibration.CalibrationData',
        description = 'Data class for calibration data'
    ),
    detNo = device('nicos.devices.generic.manual.ManualMove',
        description = 'Number of detector selected for summing',
        unit = 'number',
        abslimits = (0, 104)
    ),
    anaNo = device('nicos.devices.generic.manual.ManualMove',
        description = 'Number of analyser selected for summing',
        unit = 'number',
        abslimits = (0, 8)
    ),
)
