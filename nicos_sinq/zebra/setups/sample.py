description = 'Devices for the sample table'

pvpref = 'SQ:ZEBRA:mcu'

devices = dict(
    som = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample rotation',
        motorpv = pvpref + '1:SOM',
        errormsgpv = pvpref + '1:SOM-MsgTxt',
        precision = 0.5,
    ),
    sgl = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample lower goniometer',
        motorpv = pvpref + '1:SGL',
        errormsgpv = pvpref + '1:SGL-MsgTxt',
        precision = 0.5,
    ),
    sgu = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample upper goniometer',
        motorpv = pvpref + '1:SGU',
        errormsgpv = pvpref + '1:SGU-MsgTxt',
        precision = 0.5,
    ),
    sx = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample X translation',
        motorpv = pvpref + '1:SX',
        errormsgpv = pvpref + '1:SX-MsgTxt',
        precision = 0.5,
    ),
    sy = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample Y translation',
        motorpv = pvpref + '1:SY',
        errormsgpv = pvpref + '1:SY-MsgTxt',
        precision = 0.5,
    ),
    sz = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Sample lift',
        motorpv = pvpref + '1:SZ',
        errormsgpv = pvpref + '1:SZ-MsgTxt',
        precision = 0.5,
    ),
    stt = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'Two Theta detector',
        motorpv = pvpref + '1:STT',
        errormsgpv = pvpref + '1:STT-MsgTxt',
        precision = 0.5,
    ),
    sch = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'CHI rotation',
        motorpv = pvpref + '2:SCH',
        errormsgpv = pvpref + '2:SCH-MsgTxt',
        precision = 0.5,
    ),
    sph = device('nicos_ess.devices.epics.motor.EpicsMotor',
        description = 'PHI rotation',
        motorpv = pvpref + '2:SPH',
        errormsgpv = pvpref + '2:SPH-MsgTxt',
        precision = 0.5,
    ),
)
