description = 'Standard setup for NARZISS'

motprefix = 'SQ:NARZISS:mota:'
cterprefix = 'SQ:NARZISS:counter'

devices = dict(
    mom = device('nicos_ess.devices.epics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Monochromator omega',
        motorpv = motprefix + 'm1',
        errormsgpv = motprefix + 'm1-MsgTxt',
        precision = 0.02,
    ),
    fom = device('nicos_ess.devices.epics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Flipper omega',
        motorpv = motprefix + 'm2',
        errormsgpv = motprefix + 'm2-MsgTxt',
        precision = 0.02,
    ),
    pom = device('nicos_ess.devices.epics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Polariser omega',
        motorpv = motprefix + 'm3',
        errormsgpv = motprefix + 'm3-MsgTxt',
        precision = 0.02,
    ),
    som = device('nicos_ess.devices.epics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Sample omega',
        motorpv = motprefix + 'm4',
        errormsgpv = motprefix + 'm4-MsgTxt',
        precision = 0.02,
    ),
    sty = device('nicos_ess.devices.epics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Sample table Y',
        motorpv = motprefix + 'm5',
        errormsgpv = motprefix + 'm5-MsgTxt',
        precision = 0.02,
    ),
    aom = device('nicos_ess.devices.epics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'analyzer omega',
        motorpv = motprefix + 'm6',
        errormsgpv = motprefix + 'm6-MsgTxt',
        precision = 0.02,
    ),
    sttl = device('nicos_ess.devices.epics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'Two Theta linear translation',
        motorpv = motprefix + 'm7',
        errormsgpv = motprefix + 'm7-MsgTxt',
        precision = 0.02,
    ),
    sttc = device('nicos_ess.devices.epics.motor.EpicsMotor',
        epicstimeout = 3.0,
        description = 'STTC motor',
        motorpv = motprefix + 'm8',
        errormsgpv = motprefix + 'm8-MsgTxt',
        precision = 0.02,
    ),
    stt = device('nicos_sinq.devices.lin2ang.Lin2Ang',
        description = 'Translation from angle to linear movement',
        translation = 'sttl',
        unit = 'degree',
        length = 1866.5,
    ),
    timepreset = device('nicos_ess.devices.epics.detector.EpicsTimerActiveChannel',
        epicstimeout = 3.0,
        description = 'Used to set and view time preset',
        unit = 'sec',
        readpv = cterprefix + '.TP',
        presetpv = cterprefix + '.TP',
    ),
    elapsedtime = device('nicos_ess.devices.epics.detector.EpicsTimerPassiveChannel',
        epicstimeout = 3.0,
        description = 'Used to view elapsed time while counting',
        unit = 'sec',
        readpv = cterprefix + '.T',
    ),
    monitorpreset = device('nicos_ess.devices.epics.detector.EpicsCounterActiveChannel',
        epicstimeout = 3.0,
        description = 'Used to set and view monitor preset',
        type = 'monitor',
        readpv = cterprefix + '.PR2',
        presetpv = cterprefix + '.PR2',
    ),
    ctr1 = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'The real neutron counter',
        type = 'monitor',
        readpv = cterprefix + '.S1',
    ),
    mon1 = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'First scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S2',
    ),
    mon2 = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Second scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S3',
    ),
    c3 = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Third scalar counter channel',
        type = 'monitor',
        lowlevel = True,
        readpv = cterprefix + '.S4',
    ),
    protoncount = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Fourth scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S5',
    ),
    c5 = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Fifth scalar counter channel',
        type = 'monitor',
        lowlevel = True,
        readpv = cterprefix + '.S6',
    ),
    c6 = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Sixth scalar counter channel',
        type = 'monitor',
        lowlevel = True,
        readpv = cterprefix + '.S7',
    ),
    c7 = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Seventh scalar counter channel',
        type = 'monitor',
        lowlevel = True,
        readpv = cterprefix + '.S8',
    ),
    c8 = device('nicos_ess.devices.epics.detector.EpicsCounterPassiveChannel',
        epicstimeout = 3.0,
        description = 'Eighth scalar counter channel',
        type = 'monitor',
        lowlevel = True,
        readpv = cterprefix + '.S9',
    ),
    counter = device('nicos_sinq.devices.detector.SinqDetector',
        epicstimeout = 3.0,
        description = 'EL737 counter box that counts neutrons and '
        'starts streaming events',
        startpv = cterprefix + '.CNT',
        pausepv = cterprefix + ':Pause',
        statuspv = cterprefix + ':Status',
        errormsgpv = cterprefix + ':MsgTxt',
        thresholdpv = cterprefix + ':Threshold',
        monitorpreset = 'monitorpreset',
        timepreset = 'timepreset',
        timers = ['elapsedtime'],
        monitors = [
            'ctr1',
            'mon1',
            'mon2',
            'protoncount',
        ],
        liveinterval = 7,
        saveintervals = [60]
    )
)
startupcode = """
SetDetectors(counter)
"""
